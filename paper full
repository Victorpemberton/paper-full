import random

# Posibles elecciones
choices = ['rock', 'paper', 'scissors']

# Inicializar puntuaciones
user_wins = 0
computer_wins = 0
ties = 0

# DeclaraciÃ³n de otras variables para mostrar uso de diferentes tipos de datos
rounds = 0  # Tipo int para contar las rondas jugadas
rounds_scores = {}  # Tipo dict para almacenar los resultados de cada ronda

def determine_winner(user_choice, computer_choice):
    global user_wins, computer_wins, ties
    if user_choice == computer_choice:
        ties += 1
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        user_wins += 1
        return "You win!"
    else:
        computer_wins += 1
        return "You lose!"

def print_final_scores():
    print("Thanks for playing!")
    print(f"Final Scores -> You: {user_wins}, Computer: {computer_wins}, Ties: {ties}")
    print("Rounds details:", rounds_scores)

def main():
    global user_wins, computer_wins, ties, rounds

    print("Welcome to Rock, Paper, Scissors!")

    while True:
        user_choice = input("Enter rock, paper, or scissors (or 'quit' to end): ").lower()
        if user_choice == 'quit':
            break
        if user_choice not in choices:
            print("Invalid choice, please try again.")
            continue

        rounds += 1
        computer_choice = random.choice(choices)
        print(f"Computer chose: {computer_choice}")

        result = determine_winner(user_choice, computer_choice)
        print(result)
        print(f"Scores -> You: {user_wins}, Computer: {computer_wins}, Ties: {ties}")
        print()

        # Guardar resultado de la ronda en el diccionario
        rounds_scores[f'Round {rounds}'] = {
            'User': user_choice,
            'Computer': computer_choice,
            'Result': result
        }

    print_final_scores()

if __name__ == "__main__":
    main()
